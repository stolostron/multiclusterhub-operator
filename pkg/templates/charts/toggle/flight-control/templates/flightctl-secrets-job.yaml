apiVersion: batch/v1
kind: Job
metadata:
  name: flightctl-secrets
  namespace: '{{ .Values.global.namespace }}'
spec:
  manualSelector: true
  selector:
    matchLabels:
      flightctl.service: secrets-job
  template:
    metadata:
      labels:
        flightctl.service: secrets-job
      name: flightctl-secrets
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - "set -e\nDB_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')\nDB_MASTER_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')\nDB_USER_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')\nKV_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')\nif ! oc get secret flightctl-db-secret -n {{ .Values.global.namespace }} >/dev/null 2>&1; then\n  oc create secret generic flightctl-db-secret -n={{ .Values.global.namespace }} --from-literal=password=\"$DB_PASSWORD\" --from-literal=masterPassword=\"$DB_MASTER_PASSWORD\" --from-literal=masterUser=\"admin\" --from-literal=userPassword=\"$DB_USER_PASSWORD\" --from-literal=user=\"demouser\"\nfi\nif ! oc get secret flightctl-kv-secret -n {{ .Values.global.namespace }} >/dev/null 2>&1; then\n  oc create secret generic flightctl-kv-secret -n={{ .Values.global.namespace }} --from-literal=password=\"$KV_PASSWORD\"\nfi\n"
        env: []
        image: '{{ .Values.global.imageOverrides.origin_cli }}'
        imagePullPolicy: '{{ .Values.global.pullPolicy }}'
        name: flightctl-secrets
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: flightctl-secrets
