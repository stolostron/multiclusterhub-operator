apiVersion: batch/v1
kind: Job
metadata:
  annotations: null
  labels:
    app: flightctl-db-migration
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: flightctl
    app.kubernetes.io/version: latest
    flightctl.io/migration-revision: '1'
    helm.sh/chart: flightctl-0.1.0
    release: release-name
  name: flightctl-db-migration-1
  namespace: '{{ default "{{ .Values.global.namespace }}" .Values.global.namespace }}'
spec:
  backoffLimit: 2147483647
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: flightctl-db-migration
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: flightctl
        app.kubernetes.io/version: latest
        flightctl.io/migration-revision: '1'
        helm.sh/chart: flightctl-0.1.0
        release: release-name
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - "set -eo pipefail\necho \"Running database migrations...\"\n\n# Copy config file to a writable location\nmkdir -p /tmp/.flightctl\ncp /root/.flightctl/config.yaml /tmp/.flightctl/config.yaml\nexport HOME=/tmp\n\n/usr/local/bin/flightctl-db-migrate\necho \"Migrations completed successfully!\"\n# Grant permissions on all existing tables to the application user\necho \"Granting permissions on existing tables to application user...\"# Need to get admin credentials from init container environment\n  DB_HOST=\"flightctl-db.{{ .Values.global.namespace }}.svc.cluster.local\"\n  # Get admin credentials from the same secrets used by init container\n  export PGPASSWORD=\"$DB_ADMIN_PASSWORD\"\n  psql -h \"$DB_HOST\" -p 5432 -U \"$DB_ADMIN_USER\" -d \"flightctl\" -c \"SELECT grant_app_permissions_on_existing_tables();\"\necho \"Permission granting completed successfully!\"\n"
        env:
        - name: HOME
          value: /root
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: migrationUser
              name: flightctl-db-migration-secret
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: migrationPassword
              name: flightctl-db-migration-secret
        - name: DB_MIGRATION_USER
          valueFrom:
            secretKeyRef:
              key: migrationUser
              name: flightctl-db-migration-secret
        - name: DB_MIGRATION_PASSWORD
          valueFrom:
            secretKeyRef:
              key: migrationPassword
              name: flightctl-db-migration-secret
        - name: DB_APP_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: flightctl-db-app-secret
        - name: DB_APP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: userPassword
              name: flightctl-db-app-secret
        - name: DB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: masterUser
              name: flightctl-db-admin-secret
        - name: DB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: masterPassword
              name: flightctl-db-admin-secret
        image: '{{ .Values.global.imageOverrides.flightctl_db_setup }}'
        imagePullPolicy: '{{ .Values.global.pullPolicy }}'
        name: run-migrations
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
        volumeMounts:
        - mountPath: /root/.flightctl/
          name: flightctl-db-migration-config
          readOnly: true
      initContainers:
      - command:
        - /app/deploy/scripts/wait-for-database.sh
        - --timeout=120
        env:
        - name: DB_USER_TYPE
          value: admin
        - name: DB_HOST
          value: flightctl-db.{{ .Values.global.namespace }}.svc.cluster.local
        - name: DB_PORT
          value: '5432'
        - name: DB_NAME
          value: flightctl
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: masterUser
              name: flightctl-db-admin-secret
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: masterPassword
              name: flightctl-db-admin-secret
        image: '{{ .Values.global.imageOverrides.flightctl_db_setup }}'
        imagePullPolicy: '{{ .Values.global.pullPolicy }}'
        name: wait-for-database-admin
        volumeMounts: null
      - command:
        - /bin/bash
        - -c
        - 'set -eo pipefail


          echo "Database is ready. Setting up users..."


          # Create temporary SQL file with environment variable substitution

          export DB_HOST DB_PORT DB_NAME DB_ADMIN_USER DB_ADMIN_PASSWORD

          export DB_MIGRATION_USER DB_MIGRATION_PASSWORD DB_APP_USER DB_APP_PASSWORD


          SQL_FILE="/tmp/setup_database_users.sql"

          envsubst < ./deploy/scripts/setup_database_users.sql > "$SQL_FILE"


          # Execute the SQL file

          echo "Running database user setup SQL..."

          PGPASSWORD="$DB_ADMIN_PASSWORD" psql -v ON_ERROR_STOP=1 -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" -d "$DB_NAME" -f "$SQL_FILE"


          # Clean up temporary file

          rm -f "$SQL_FILE"


          echo "Database users setup completed successfully!"

          '
        env:
        - name: DB_HOST
          value: flightctl-db.{{ .Values.global.namespace }}.svc.cluster.local
        - name: DB_PORT
          value: '5432'
        - name: DB_NAME
          value: flightctl
        - name: DB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: masterUser
              name: flightctl-db-admin-secret
        - name: DB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: masterPassword
              name: flightctl-db-admin-secret
        - name: DB_MIGRATION_USER
          valueFrom:
            secretKeyRef:
              key: migrationUser
              name: flightctl-db-migration-secret
        - name: DB_MIGRATION_PASSWORD
          valueFrom:
            secretKeyRef:
              key: migrationPassword
              name: flightctl-db-migration-secret
        - name: DB_APP_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: flightctl-db-app-secret
        - name: DB_APP_PASSWORD
          valueFrom:
            secretKeyRef:
              key: userPassword
              name: flightctl-db-app-secret
        image: '{{ .Values.global.imageOverrides.flightctl_db_setup }}'
        imagePullPolicy: '{{ .Values.global.pullPolicy }}'
        name: setup-database-users
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: flightctl-db-migration
      volumes:
      - configMap:
          name: flightctl-db-migration-config
        name: flightctl-db-migration-config
